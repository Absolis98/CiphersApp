import React from "react";
import { View, StyleSheet, Text, ScrollView, Image } from "react-native";

const HomeScreen = ({ navigation }) => {
  return (
    <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
      <View style={styles.container}>
        <Text style={styles.title} alignItems={"center"}>
          PRESENT Block Cipher!!
        </Text>
        <Text>
          The PRESENT Cipher is a block cipher that consists of 31 rounds. It
          involves having a block length of 64 and two possible key lengths of
          80 or 120 bits. Each round of the cipher involves XOR operations
          between the plaintext and round keys that are generated by their own
          linear rotation, sBox substitution, and XOR operations. The updated
          values from the plaintext are then substituted with sBox values and
          permutated using a specific permutation order. The decryption of the
          PRESENT cipher involves beginning with XOR operations between the
          ciphertext and the round keys. The updated ciphertext is then
          permutated and substituted for sBox values, using inverted sBox and
          permutation values; these two operations happen in reverse order of
          the encryption process. Although this project deals with software,
          PRESENT was intended for a hardware system. Although it is meant to be
          a light-weight, high-efficient and is the standard lightweight
          cypto-system.
        </Text>
        <Image
          style={styles.image}
          source={require("../../assets/present.png")}
        />
        <Text>Encryption:</Text>
        <Text>
          To begin the encryption, process the plaintext is organized into
          64-bit blocks, and the key is computed, checking to make sure that it
          is the appropriate length necessary for encrypting to 80 or 120 bits
          (based on the user’s specification) and filling in any empty space if
          needed. The blocks are then sent through a function to convert their
          values into binary values, and then call a function to generate the
          round keys based on the size of key that the user has specified. The
          updated block is then sent through a loop that executes XOR operations
          on the blocks and round keys, the block values are substituted using
          sBox values, and the order of the values in the blocks are permutated
          for 30 rounds. On the 31st round we then perform an XOR on the final
          block value and the final key. Finally, the blocks are converted back
          into hexadecimal and returned as the desired ciphertext.
        </Text>
        <Text>Decryption</Text>
        <Text>
          To begin deciphering the plaintext we begin by putting the cipher text
          into blocks and sending the blocks through a function to convert their
          values into binary values. The key is computed, checking to make sure
          that it is the appropriate length necessary for decrypting from 80 or
          120 bits (based on the user’s specification) and filling in any empty
          space if needed. The block of ciphertext is then sent through a loop
          that performs XOR operations between the blocks and each round key,
          the order of the values in the blocks are permutated using inverted
          permutation values for 30 rounds, with the 31st round performing an
          XOR on the final block value and the final key, and lastly the block
          values are substituted using inverted sBox values. Finally, the blocks
          are sent through a function that converts the values from binary back
          into plaintext, and the plaintext is returned.
        </Text>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 20,
    alignItems: "center",
    backgroundColor: "#ffe3de",
  },
  title: {
    fontSize: 20,
    fontWeight: "bold",
  },
  image: {
    width: "105%",
    height: 200,
    resizeMode: "contain",
  },
  navText: {
    margin: 40,
    fontWeight: "bold",
  },
  button: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    marginVertical: 10,
    borderRadius: 5,
  },
});

export default HomeScreen;
